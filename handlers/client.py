from aiogram import types, Dispatcher
from create_bot import dp, bot
from keyboard import kb_client
from data_base import sqlite_db
from aiogram. types import InlineKeyboardMarkup, InlineKeyboardButton

# @dp.message_handler(commands=['start', 'help'])
async def command_start(message: types.Message):
    try:
        await bot.send_message(message.from_user.id, '–ü—Ä–∏–≤–µ—Ç!üçÄ', reply_markup=kb_client)
        #await message.delete()
    except:
        await message.reply('–û–±—â–µ–Ω–∏–µ —Å –±–æ—Ç–æ–º —á–µ—Ä–µ–∑ –õ–°, –Ω–∞–ø–∏—à–∏—Ç–µ –µ–º—É: \nhttps://t.me/megekbot')

# @dp.message_handler(commands=['–†–µ–∂–∏–º_—Ä–∞–±–æ—Ç—ã'])

urlkb = InlineKeyboardMarkup(row_width=1)
urlButton = InlineKeyboardButton(text='VK', url='https://vk.com/memphis.logistics')
urlButton2 = InlineKeyboardButton(text='Telegram ', url='https://t.me/memphis_store')
urlkb.add(urlButton, urlButton2)

#dp.message handler (commands="—Å—Å—ã–ª–∫–∏")
async def url_command (message : types .Message):
    await message.answer ( "–Ω–∞—à–∏ –≥—Ä—É–ø–ø—ã –≤:", reply_markup=urlkb)

async def open_command(message: types.Message):
    await bot.send_message(message.from_user.id, '–ø–Ω-–ø—Ç —Å 12 –¥–æ 19')

# @dp.message_handler(commands=['–†–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏–µ'])
async def place_command(message: types.Message):
    await bot.send_message(message.from_user.id, '–†–æ–º–∞–Ω–æ–≤ –ø–µ—Ä–µ—É–ª–æ–∫, 4—Å2')

# @dp.message_handler(commands=['–ö–∞—Ç–∞–ª–æ–≥_—Ç–æ–≤–∞—Ä–æ–≤'])
async def command_catalog(message: types.Message):
   await sqlite_db.sql_read(message)


async def info(message: types.Message):
    await bot.send_message(message.from_user.id, '–æ—Ç–∑—ã–≤—ã –æ —Ä–∞–±–æ—Ç–µ —Å –Ω–∞–º–∏\n‚Ä¢https://vk.com/shreckx?w=wall248557604_557%2Fall')

#@dp.message_handlers(lambda message: "–∫–∞–∫" in message.text)
async def order(message: types.Message):
    await bot.send_message(message.from_user.id, '1)–≤—ã–±–µ—Ä–µ—Ç–µ —Ç–æ–≤–∞—Ä –∏–∑ –Ω–∞—à–µ–≥–æ –∫–∞—Ç–∞–ª–æ–≥–∞\n2)–Ω–∞–ø–∏—à–∏—Ç–µ –Ω–∞—à–µ–º—É –º–µ–Ω–µ–¥–∂–µ—Ä—É @Dsdo7')


# –§—É–Ω–∫—Ü–∏—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –ø–æ —Ü–µ–Ω–µ
#@dp.message_handler(commands=['filter_price'])
async def filter_price(message: types.Message):
    try:
        await message.reply('–í–≤–µ–¥–∏—Ç–µ –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é –∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é —Ü–µ–Ω—ã –≤ —Ñ–æ—Ä–º–∞—Ç–µ "–º–∏–Ω–∏–º–∞–ª—å–Ω–∞—è_—Ü–µ–Ω–∞ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è_—Ü–µ–Ω–∞":')
        await dp.register_next_step_handler(message, process_price_range)
    except Exception as e:
        await message.reply('–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫: ' + str(e))


async def process_price_range(message: types.Message):
    try:
        price_range = message.text.split()
        if len(price_range) != 2:
            await message.reply('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤–≤–æ–¥–∞. –í–≤–µ–¥–∏—Ç–µ –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é –∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é —Ü–µ–Ω—ã —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª.')
            return

        min_price = float(price_range[0])
        max_price = float(price_range[1])

        results = await sqlite_db.filter_by_price_range(min_price, max_price)

        if results:
            for ret in results:
                await bot.send_photo(message.from_user.id, ret[0], f'{ret[1]}\n–û–ø–∏—Å–∞–Ω–∏–µ: {ret[2]}\n–¶–µ–Ω–∞ {ret[-1]}')
        else:
            await message.reply('–¢–æ–≤–∞—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã')
    except ValueError:
        await message.reply('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ü–µ–Ω—ã')


def register_handlers_client(dp: Dispatcher):
    dp.register_message_handler(command_start, commands=['start', 'help'])
    dp.register_message_handler(url_command, lambda message: "–∫–æ–Ω—Ç–∞–∫—Ç—ã" in message.text)
    dp.register_message_handler(open_command, lambda message: "—Ä–µ–∂–∏–º" in message.text)
    dp.register_message_handler(place_command, lambda message: "—Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏–µ" in message.text)
    dp.register_message_handler(command_catalog, lambda message: "–∫–∞—Ç–∞–ª–æ–≥" in message.text)
    dp.register_message_handler(info, lambda message: "–æ—Ç–∑—ã–≤—ã" in message.text)
    dp.register_message_handler(order, lambda message: "–∫–∞–∫" in message.text)
    dp.register_message_handler(filter_price, lambda message: "—Ñ–∏–ª—å—Ç—Ä" in message.text)
    #commands=['–∫–∞–∫_—Å–¥–µ–ª–∞—Ç—å_–∑–∞–∫–∞–∑']